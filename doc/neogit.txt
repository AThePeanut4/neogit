*neogit.txt* A Magit clone for Neovim that is geared towards the Vim philosophy.
*neogit*
Author: TimUntersberger
License: MIT license {{{

  Copyright (c) 2020 Karl Yngve Lerv√•g

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to
  deal in the Software without restriction, including without limitation the
  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
  sell copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
  IN THE SOFTWARE.
}}}

==============================================================================
CONTENTS                                                       *neogit_contents*

    1. Intro                         |neogit_intro|
    2. Commands                      |neogit_commands|
    3. Mappings                      |neogit_mappings|
    4. Highlights                    |neogit_highlights|
    5. API                           |neogit_api|
    6. Popups                        |neogit_popups|

==============================================================================
1. Intro                                                          *neogit_intro*

Neogit is a git client for Neovim built as a clone of the popular emacs git
client 'Magit'.

"Magit is a complete text-based user interface to Git. It fills the glaring
gap between the Git command-line interface and various GUIs, letting you
perform trivial as well as elaborate version control tasks with just a couple
of mnemonic key presses. Magit looks like a prettified version of what you get
after running a few Git commands but in Magit every bit of visible information
is also actionable to an extent that goes far beyond what any Git GUI provides
and it takes care of automatically refreshing this output when it becomes
outdated. In the background Magit just runs Git commands and if you wish you
can see what exactly is being run, making it possible for you to learn the git
command-line by using Magit.

Using Magit for a while will make you a more effective version control user.
Magit supports and streamlines the use of Git features that most users and
developers of other Git clients apparently thought could not be reasonably
mapped to a non-command-line interface. Magit is both faster and more
intuitive than either the command line or any GUI and these holds for both
Git beginners and experts alike."

- https://magit.vc/


Though not yet feature complete, our goal is to bring the Magit git experience
to Neovim users.

==============================================================================
2. Commands                                                    *neogit_commands*

                                                                       *:Neogit*
:Neogit                 In a Git repository, opens a new NeogitStatus tab.

                                                               *:NeogitMessages*
:NeogitMessages         Prints messages from neogit's messaging system.

                                                             *:NeogitResetState*
:NeogitResetState       Performs a full reset of saved flags for all popups.

==============================================================================
3. Mappings                                                    *neogit_mappings*

                                                            *neogit_status_maps*
Status Mappings

                                                                      *neogit_s*
s                       Stage file/hunk/visual-selection

                                                                      *neogit_S*
S                       Stage unstaged changes

                                                                  *neogit_<C-s>*
<C-s>                   Stage Everything

                                                                      *neogit_u*
u                       Unstage file/hunk/visual-selection

                                                                      *neogit_U*
U                       Unstage staged changes

                                                                      *neogit_x*
x                       Discard changes for file/hunk/visual-selection

                                                                   *neogit_<cr>*
<cr>                    Goto item at cursor

                                                                  *neogit_<tab>*
<tab>                   Toggle diff

                                                                      *neogit_{*
{                       Goto previous hunk

                                                                      *neogit_}*
}                       Goto next hunk

                                                                  *neogit_<C-r>*
<C-r>                   Refresh Buffer

                                                                   *neogit_fold*
1, 2, 3, 4              Set a foldlevel


                                                             *neogit_popup_maps*
Popup maps ~

                                                                      *neogit_$*
$                       Command History

                                                                      *neogit_#*
#                       Console Output

                                                                      *neogit_L*
L                       Open log popup

                                                                      *neogit_p*
p                       Open pull popup

                                                                      *neogit_P*
P                       Open push popup

                                                                      *neogit_f*
f                       Open fetch popup

                                                                      *neogit_X*
X                       Open reset popup

                                                                      *neogit_A*
A                       Open cherry-pick popup

                                                                      *neogit_m*
m                       Open merge popup

                                                                      *neogit_v*
v                       Open revert popup

                                                                      *neogit_M*
M                       Open remotes popup

                                                                      *neogit_?*
?                       Open help popup

                                                                      *neogit_b*
b                       Open branch popup

                                                                      *neogit_c*
c                       Open commit popup

                                                                      *neogit_r*
r                       Open rebase popup

                                                                      *neogit_Z*
Z                       Open stash popup

==============================================================================
4. Highlights                                                *neogit_highlights*

The following highlight groups are defined by this plugin. If you set any of
these yourself before the plugin loads, that will be respected. If they do not
exist, they will be created with sensible defaults based on your colorscheme.

STATUS BUFFER
NeogitBranch                Header showing currently checked out branch
NeogitRemote                Header showing current branch's remote (if set)
NeogitObjectId              Object's SHA hash
NeogitStash                 Stash name
NeogitFold                  Folded text highlight
NeogitRebaseDone            Current position within rebase

STATUS BUFFER SECTION HEADERS
NeogitUnpushedTo
NeogitUnmergedInto
NeogitUnpulledFrom
NeogitUntrackedfiles
NeogitUnstagedchanges
NeogitUnmergedchanges
NeogitUnpulledchanges
NeogitRecentcommits
NeogitStagedchanges
NeogitStashes
NeogitRebasing

STATUS BUFFER FILE
Applied to the label on the left of filenames.

NeogitChangeModified
NeogitChangeAdded
NeogitChangeDeleted
NeogitChangeRenamed
NeogitChangeUpdated
NeogitChangeCopied
NeogitChangeBothModified
NeogitChangeNewFile

SIGNS FOR LINE HIGHLIGHTING
Used to highlight different sections of the status buffer or commit buffer.

NeogitHunkHeader
NeogitDiffContext
NeogitDiffAdd
NeogitDiffDelete
NeogitDiffHeader

SIGNS FOR LINE HIGHLIGHTING CURRENT CONTEXT
These are essentially an accented version of the above highlight groups. Only
applies to the current context the cursor is within.

NeogitHunkHeaderHighlight
NeogitDiffContextHighlight
NeogitDiffAddHighlight
NeogitDiffDeleteHighlight
NeogitDiffHeaderHighlight

NeogitCursorLine            Applies a "fake" cursorline highlight because
                            signs will otherwise take precedence over normal
                            CursorLine HL group

COMMIT BUFFER
NeogitFilePath              Applied to filepath
NeogitCommitViewHeader      Applied to header of Commit View

LOG VIEW BUFFER
NeogitGraphRed              Used when --colors is enabled for graph
NeogitGraphOrange
NeogitGraphYellow
NeogitGraphGreen
NeogitGraphBlue
NeogitGraphPurple

NeogitGraphRedBold          (Same as above, but bold)
NeogitGraphOrangeBold
NeogitGraphYellowBold
NeogitGraphGreenBold
NeogitGraphBlueBold
NeogitGraphPurpleBold

POPUPS
NeogitPopupSectionTitle    Applied to all section headers
NeogitPopupBranchName      Applied to the current branch name for emphasis
NeogitPopupBold            Applied on "@{upstream}" and "pushRemote" for
                           emphasis (but less emphasis than BranchName)

NeogitPopupSwitchKey       Applied to the key that will toggle switch
NeogitPopupSwitchEnabled   Applied to the flag if enabled
NeogitPopupSwitchDisabled  Applied to the flag if disabled

NeogitPopupOptionKey       Applied to the key that will trigger option
NeogitPopupOptionEnabled   Applied if option is set
NeogitPopupOptionDisabled  Applied if option has no value

NeogitPopupConfigKey       Applied to the key that triggers config
NeogitPopupConfigEnabled   Applied to enabled config value
NeogitPopupConfigDisabled  Applied to config without value

NeogitPopupActionKey       Applied to key that triggers function
NeogitPopupActionDisabled  Applied to key when function is unimplemented

NOTIFICATIONS
NeogitNotificationInfo     Linked to DiagnosticInfo by default
NeogitNotificationWarning  Linked to DiagnosticWarning by default
NeogitNotificationError    Linked to DiagnosticError by default


COMMAND HISTORY BUFFER
NeogitCommandText          Git command that was run
NeogitCommandTime          Execution time
NeogitCommandCodeNormal    Applied to a successful command's exit status (0)
NeogitCommandCodeError     When command exits with non-zero status

==============================================================================
5. Lua API                                               *neogit_api* *neogit-lua*

neogit.open({*opts})                                             *neogit.open()*
    Open Neogit. Alternative to `:Neogit` >lua
        local neogit = require('neogit')

        -- open using defaults
        neogit.open()

        -- open commit popup
        neogit.open({ "commit" })

        -- open with split kind
        neogit.open({ kind = "split" })

        -- open home directory
        neogit.open({ cwd = "~" })
<
    Parameters:
      ‚Ä¢ {opts}  (table|nil)
                ‚Ä¢ kind (string) optional: How to open Neogit.
                    - "tab" (default) like :tab split
                    - "replace"       like :enew
                    - "split"         like :below split
                    - "split_above"   like :top split
                    - "vsplit"        like :vsplit
                    - "floating" not-yet-implemented

                ‚Ä¢ cwd (string) optional: Path to git repository.
                  default: |current-directory|.
                ‚Ä¢ no_expand (boolean) optional: Set to true to
                  prevent the calling of `expand()` on the path.

                ‚Ä¢ [1] (string) optional: Name of the Neogit
                  popup to open. See |neogit-popups|.


==============================================================================
6. Popups                                                        *neogit_popups*

A Neogit popup is a client interface over a git subcommand or other
git mechanism.

                                                                 *neogit_branch*
"branch"             see :Man git-branch or |neogit_branch_popup|

                                                          *neogit_branch_config*
"branch_config"      Common configuration for branch/repo

                                                            *neogit_cherry_pick*
"cherry_pick"        see :Man git-cherry-pick

                                                                 *neogit_commit*
"commit"             see :Man git-commit

                                                                   *neogit_diff*
"diff"               see :Man git-diff

                                                                  *neogit_fetch*
"fetch"              see :Man git-fetch

                                                                   *neogit_help*
"help"               Overview of different popups

                                                                    *neogit_log*
"log"                see :Man git-log

                                                                  *neogit_merge*
"merge"              see :Man git-merge

                                                                   *neogit_pull*
"pull"               see :Man git-pull

                                                                   *neogit_push*
"push"               see :Man git-push

                                                                 *neogit_rebase*
"rebase"             see :Man git-rebase

                                                                 *neogit_remote*
"remote"             see :Man git-remote

                                                          *neogit_remote_config*
"remote_config"      Common configuration for remote

                                                                  *neogit_reset*
"reset"              see :Man git-reset

                                                                 *neogit_revert*
"revert"             see :Man git-revert

                                                                  *neogit_stash*
"stash"              see :Man git-stash

==============================================================================
Cherry-Pick Popup                                     *neogit_cherry_pick_popup*

Arguments:                                       *neogit_cherry_pick_popup_args*
  ‚Ä¢ --ff
    If the current HEAD is the same as the parent of the cherry-pick‚Äôed
    commit, then a fast forward to this commit will be performed.

Actions:                                      *neogit_cherry_pick_popup_actions*
  Actions for the branch popup are split into two categories: "Apply here",
  and "Apply elsewhere". The former will update the current HEAD, whereas the
  latter will prompt for a target.

  When a Cherry-Pick isn't in progress, the following actions are available:

  ‚Ä¢ Pick                                               *neogit_cherry_pick_pick*
    This command copies COMMITS from another branch onto the current branch.
    If a commit is under the cursor, or multiple commits are selected, then
    those are used instead of prompting. Otherwise the user is prompted to
    select one or more commits.

  ‚Ä¢ Apply                                             *neogit_cherry_pick_apply*
    This command applies the changes in COMMITS from another branch onto the
    current branch, without committing. If a commit is under the cursor, or
    multiple commits are selected, then those are used instead of prompting.
    Otherwise the user is prompted to select one or more commits.

  ‚Ä¢ Harvest                                         *neogit_cherry_pick_harvest*
    (not yet implemented)

  ‚Ä¢ Squash                                           *neogit_cherry_pick_squash*
    (not yet implemented)

  ‚Ä¢ Donate                                           *neogit_cherry_pick_donate*
    (not yet implemented)

  ‚Ä¢ Spinout                                         *neogit_cherry_pick_spinout*
    (not yet implemented)

  ‚Ä¢ Spinoff                                         *neogit_cherry_pick_spinoff*
    (not yet implemented)


  When a Cherry-Pick is in progress, the following actions are available:

  ‚Ä¢ Continue                                       *neogit_cherry_pick_continue*
    Resume current cherry-pick sequence.

  ‚Ä¢ Skip                                               *neogit_cherry_pick_skip*
    Skip the current commit during a cherry-pick sequence.

  ‚Ä¢ Abort                                             *neogit_cherry_pick_abort*
    Abort the current cherry-pick sequence. This discards all changes made.

==============================================================================
Branch Popup                                               *neogit_branch_popup*

Variables:                                       *neogit_branch_popup_variables*
  ‚Ä¢ branch.<name>.description

  ‚Ä¢ branch.<name>.merge
    branch.<name>.remote

  ‚Ä¢ branch.<name>.rebase
    Cycles branch.<name>.rebase value between true, false, and the value of
    `pull.rebase`. When enabled, actions like pulling will attempt to rebase
    by default.

  ‚Ä¢ branch.<name>.pushRemote
    Cycles pushRemote between the remotes currently configured for the
    repository. `remote.pushDefault` will be offered, if set.

Arguments:                                            *neogit_branch_popup_args*
  ‚Ä¢ --recurse-submodules
    (EXPERIMENTAL) Causes the current command to recurse into submodules if
    submodule.propagateBranches is enabled.

    When used in branch creation, a new branch <branchname> will be created
    in the superproject and all of the submodules in the superproject‚Äôs
    <start-point>. In submodules, the branch will point to the submodule
    commit in the superproject‚Äôs <start-point> but the branch‚Äôs tracking
    information will be set up based on the submodule‚Äôs branches and remotes
    e.g.  git branch --recurse-submodules topic origin/main will create the
    submodule branch "topic" that points to the submodule commit in the
    superproject‚Äôs "origin/main", but tracks the submodule‚Äôs "origin/main".

Actions:                                           *neogit_branch_popup_actions*
  Actions for the branch popup are split into three categories: "Checkout",
  "Create", and "Do". They behave as described: "Checkout" actions will change
  your HEAD when checking out the selected/created branch. "Create" actions,
  by contrast, will _not_ change HEAD.

  Finally, "Do" actions provide some common housekeeping actions.

  ‚Ä¢ Checkout branch/revision                        *neogit_branch_checkout_rev*
    Changes HEAD to point to the selected branch/revision. If a local branch
    is selected, that will be checked out. Otherwise HEAD will become
    detatched. Any ref under the cursor or selected will be available to
    checkout.

  ‚Ä¢ Checkout local branch                         *neogit_branch_checkout_local*
    Changes HEAD to point to the selected branch. Also lists branches on
    remotes that do not have a matching branch locally. If a remote branch is
    selected, then a local branch is created tracking the selected remote
    branch.

  ‚Ä¢ Checkout new branch                             *neogit_branch_checkout_new*
    Creates and switches HEAD to a new branch. Any whitespace in the branch
    name will be automatically changed to '-'.

    For example, entering "new branch name" will result in a branch called
    "new-branch-name" being created.

    After entering a name, you will be prompted to choose a base branch for
    the branch being created. The current branch will be at the top of the
    list, but any branch can be chosen.

  ‚Ä¢ Checkout new spin-off                               *neogit_branch_spin_off*
    This command creates and checks out a new branch starting at and tracking
    the current branch. That branch in turn is reset to the last commit it
    shares with its upstream. If the current branch has no upstream or no
    unpushed commits, then the new branch is created anyway and the previously
    current branch is not touched.

    This is useful to create a feature branch after work has already began on
    the old branch.

  ‚Ä¢ Checkout new worktree                      *neogit_branch_checkout_worktree*
    (Not yet implimented)

  ‚Ä¢ Create new branch                              *neogit_branch_create_branch*
    Functionally the same as |neogit_branch_checkout_new|, but does not update
    HEAD.

  ‚Ä¢ Create new spin-out                                 *neogit_branch_spin_out*
    Like |neogit_branch_spin_off|, but doesn't change HEAD. However, if the
    index has uncomitted changes, will behave exactly the same as spin_off.

  ‚Ä¢ Create new worktree                          *neogit_branch_create_worktree*
    (Not yet implimented)

  ‚Ä¢ Configure                                          *neogit_branch_configure*
    Opens selector to choose a branch, then offering some configuration
    options. See |neogit_branch_config_popup|.

  ‚Ä¢ Rename                                                *neogit_branch_rename*
    Opens selector to choose a branch to rename. Like with a new branch, any
    whitespace will be replaced with '-'.

  ‚Ä¢ Reset                                                  *neogit_branch_reset*
    Resets the current branch to the the selected branch via a hard reset.
    Uncommitted changes will be lost in the process.

  ‚Ä¢ Delete                                                *neogit_branch_delete*
    Opens selector, allowing the user to delete either a local or remote
    branch.

==============================================================================
Branch Config Popup                                 *neogit_branch_config_popup*

Allows configuring some common config settings for the selected branch, as
well as some repository defaults.

Branch:
  ‚Ä¢ branch.<name>.description
  ‚Ä¢ branch.<name>.merge
  ‚Ä¢ branch.<name>.remote
  ‚Ä¢ branch.<name>.rebase
  ‚Ä¢ branch.<name>.pushRemote

Repository defaults:
  ‚Ä¢ pull.rebase
  ‚Ä¢ remote.pushDefault
  ‚Ä¢ neogit.baseBranch

Branch creation:
  ‚Ä¢ branch.autoSetupMerge
  ‚Ä¢ branch.autoSetupRebase

==============================================================================
Commit Popup                                               *neogit_commit_popup*

Arguments:                                            *neogit_commit_popup_args*
  ‚Ä¢ --all
    Tell the command to automatically stage files that have been modified and
    deleted, but new files you have not told Git about are not affected.

  ‚Ä¢ --allow-empty
    Usually recording a commit that has the exact same tree as its sole parent
    commit is a mistake, and the command prevents you from making such a
    commit. This option bypasses the safety, and is primarily for use by
    foreign SCM interface scripts.

  ‚Ä¢ --verbose
    Show unified diff between the HEAD commit and what would be committed at
    the bottom of the commit message template to help the user describe the
    commit by reminding what changes the commit has. Note that this diff
    output doesn‚Äôt have its lines prefixed with #. This diff will not be a
    part of the commit message. See the `commit.verbose` configuration variable
    in git-config(1).

  ‚Ä¢ --no-verify
    Skip any pre-commit or commit-msg hooks. See also githooks(5).

  ‚Ä¢ --signoff
    Add a Signed-off-by trailer by the committer at the end of the commit log
    message. The meaning of a signoff depends on the project to which you‚Äôre
    committing. For example, it may certify that the committer has the rights
    to submit the work under the project‚Äôs license or agrees to some
    contributor representation, such as a Developer Certificate of Origin.

    See http://developercertificate.org for the one used by the Linux kernel
    and Git projects.

    Consult the documentation or leadership of the project to which you‚Äôre
    contributing to understand how the signoffs are used in that project.

  ‚Ä¢ --no-gpg-sign
    This is useful to countermand both commit.gpgSign configuration variable,
    and --gpg-sign

  ‚Ä¢ --reset-author
    When used while ammending or when committing after a conflicting
    cherry-pick, declare that the authorship of the resulting commit now
    belongs to the committer. This also renews the author timestamp.

  ‚Ä¢ --author=
    Override the commit author. Specify an explicit author using the standard
    A U Thor <author@example.com> format. Otherwise <author> is assumed to be
    a pattern and is used to search for an existing commit by that author
    (i.e. rev-list --all -i --author=<author>); the commit author is then
    copied from the first such commit found.

  ‚Ä¢ --gpg-sign=
    GPG-sign commits. The argument should be the keyid is optional and
    defaults to the committer identity,

  ‚Ä¢ --reuse-message=
    Take an existing commit object, and reuse the log message and the
    authorship information (including the timestamp) when creating the commit.

Actions:                                           *neogit_commit_popup_actions*
  Actions in the commit popup are in three groups: "Create", "Edit HEAD", and
  "Edit". The first should be somewhat self explanatory - you can create a new
  commit from your staged changes. "Edit HEAD" actions will modify the current
  commit HEAD is pointing at, and "Edit" will modify commits that your HEAD
  isn't pointing to.

  ‚Ä¢ Create Commit                                         *neogit_commit_create*
    Creates a new commit on the current branch from the currently staged
    changes.

  ‚Ä¢ Extend                                                *neogit_commit_extend*
    Amends the last commit without editing the commit message.

  ‚Ä¢ Reword                                                *neogit_commit_reword*
    Edit the last commit message without modifying the committed changes. Any
    staged changes are ignored.

  ‚Ä¢ Amend                                                  *neogit_commit_amend*
    Amend the last commit.

  ‚Ä¢ Fixup                                                  *neogit_commit_fixup*
    Creates a fixup commit. If a commit is selected it will be used, otherwise
    the user is prompted to pick a commit.

  ‚Ä¢ Squash                                                *neogit_commit_squash*
    Creates a squash commit. If a commit is selected it will be used,
    otherwise the user is prompted to pick a commit.

  ‚Ä¢ Augment                                              *neogit_commit_augment*
    Creates a squash commit, editing the squash message. If a commit is
    selected it will be used, otherwise the user is prompted to pick a commit.

  ‚Ä¢ Instant Fixup                                  *neogit_commit_instant_fixup*
    Similar to |neogit_commit_fixup|, but instantly rebases after.

  ‚Ä¢ Instant Squash                                *neogit_commit_instant_squash*
    Similar to |neogit_commit_squash|, but instantly rebases after.

==============================================================================
Fetch Popup                                                 *neogit_fetch_popup*

Arguments:                                             *neogit_fetch_popup_args*
  ‚Ä¢ --prune
    Before fetching, remove any remote-tracking references that no longer
    exist on the remote. Tags are not subject to pruning if they are fetched
    only because of the default tag auto-following or due to a --tags option.

    However, if tags are fetched due to an explicit refspec (either on the
    command line or in the remote configuration, for example if the remote was
    cloned with the --mirror option), then they are also subject to pruning.

  ‚Ä¢ --tags
    Fetch all tags from the remote (i.e., fetch remote tags refs/tags/* into
    local tags with the same name), in addition to whatever else would
    otherwise be fetched. Using this option alone does not subject tags to
    pruning, even if --prune is used (though tags may be pruned anyway if
    they are also the destination of an explicit refspec; see --prune).


Actions:                                            *neogit_fetch_popup_actions*

  ‚Ä¢ Fetch from pushRemote                              *neogit_fetch_pushremote*
    Fetches from the current pushRemote.

    When the pushRemote is not configured, the user will be prompted to choose
    from the existing remotes to set it.

  ‚Ä¢ Fetch from upstream                                  *neogit_fetch_upstream*
    Fetches from the upstream of the current branch.

    If the upstream is configured for the current branch and names an existing
    remote, then use that. Otherwise try to use another remote: If only a
    single remote is configured, then use that. Otherwise if a remote named
    "origin" exists, then use that.

  ‚Ä¢ Fetch from elsewhere                                *neogit_fetch_elsewhere*
    Provides a select interface for the user to choose which remote to fetch
    from.

  ‚Ä¢ Fetch from All Remotes                                    *neogit_fetch_all*
    Fetches from all configured remotes.

  ‚Ä¢ Fetch Another Branch                                   *neogit_fetch_branch*
    Fetches only a specific branch from a remote, both of which are selected
    by the user.

  ‚Ä¢ Fetch Explicit Refspec                                *neogit_fetch_refspec*
    Fetches from a remote using an explicit refspec.

  ‚Ä¢ Fetch Submodules                                   *neogit_fetch_submodules*
    Fetches all submodules.

  ‚Ä¢ Set Variables                                   *neogit_fetch_set_variables*
    Opens Branch Config popup for the current branch.

vim:tw=78:ts=8:ft=help
